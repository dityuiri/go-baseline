// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: stock.proto

package stock

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StockServer_GetSummary_FullMethodName = "/example.StockServer/GetSummary"
)

// StockServerClient is the client API for StockServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServerClient interface {
	GetSummary(ctx context.Context, in *Stock, opts ...grpc.CallOption) (*Response, error)
}

type stockServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServerClient(cc grpc.ClientConnInterface) StockServerClient {
	return &stockServerClient{cc}
}

func (c *stockServerClient) GetSummary(ctx context.Context, in *Stock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, StockServer_GetSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServerServer is the server API for StockServer service.
// All implementations should embed UnimplementedStockServerServer
// for forward compatibility
type StockServerServer interface {
	GetSummary(context.Context, *Stock) (*Response, error)
}

// UnimplementedStockServerServer should be embedded to have forward compatible implementations.
type UnimplementedStockServerServer struct {
}

func (UnimplementedStockServerServer) GetSummary(context.Context, *Stock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}

// UnsafeStockServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServerServer will
// result in compilation errors.
type UnsafeStockServerServer interface {
	mustEmbedUnimplementedStockServerServer()
}

func RegisterStockServerServer(s grpc.ServiceRegistrar, srv StockServerServer) {
	s.RegisterService(&StockServer_ServiceDesc, srv)
}

func _StockServer_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServerServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockServer_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServerServer).GetSummary(ctx, req.(*Stock))
	}
	return interceptor(ctx, in, info, handler)
}

// StockServer_ServiceDesc is the grpc.ServiceDesc for StockServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.StockServer",
	HandlerType: (*StockServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummary",
			Handler:    _StockServer_GetSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock.proto",
}
