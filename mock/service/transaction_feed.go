// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dityuiri/go-baseline/service (interfaces: ITransactionFeedService)

// Package service_mock is a generated GoMock package.
package service_mock

import (
	bytes "bytes"
	reflect "reflect"

	model "github.com/dityuiri/go-baseline/model"
	gomock "github.com/golang/mock/gomock"
)

// MockITransactionFeedService is a mock of ITransactionFeedService interface.
type MockITransactionFeedService struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionFeedServiceMockRecorder
}

// MockITransactionFeedServiceMockRecorder is the mock recorder for MockITransactionFeedService.
type MockITransactionFeedServiceMockRecorder struct {
	mock *MockITransactionFeedService
}

// NewMockITransactionFeedService creates a new mock instance.
func NewMockITransactionFeedService(ctrl *gomock.Controller) *MockITransactionFeedService {
	mock := &MockITransactionFeedService{ctrl: ctrl}
	mock.recorder = &MockITransactionFeedServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionFeedService) EXPECT() *MockITransactionFeedServiceMockRecorder {
	return m.recorder
}

// ProduceTransaction mocks base method.
func (m *MockITransactionFeedService) ProduceTransaction(arg0 bytes.Buffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceTransaction indicates an expected call of ProduceTransaction.
func (mr *MockITransactionFeedServiceMockRecorder) ProduceTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceTransaction", reflect.TypeOf((*MockITransactionFeedService)(nil).ProduceTransaction), arg0)
}

// TransactionRecorded mocks base method.
func (m *MockITransactionFeedService) TransactionRecorded(arg0 *model.Transaction) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionRecorded", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionRecorded indicates an expected call of TransactionRecorded.
func (mr *MockITransactionFeedServiceMockRecorder) TransactionRecorded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionRecorded", reflect.TypeOf((*MockITransactionFeedService)(nil).TransactionRecorded), arg0)
}
