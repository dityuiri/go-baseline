// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dityuiri/go-baseline/service (interfaces: IPlaceholderFeedService)

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/dityuiri/go-baseline/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIPlaceholderFeedService is a mock of IPlaceholderFeedService interface.
type MockIPlaceholderFeedService struct {
	ctrl     *gomock.Controller
	recorder *MockIPlaceholderFeedServiceMockRecorder
}

// MockIPlaceholderFeedServiceMockRecorder is the mock recorder for MockIPlaceholderFeedService.
type MockIPlaceholderFeedServiceMockRecorder struct {
	mock *MockIPlaceholderFeedService
}

// NewMockIPlaceholderFeedService creates a new mock instance.
func NewMockIPlaceholderFeedService(ctrl *gomock.Controller) *MockIPlaceholderFeedService {
	mock := &MockIPlaceholderFeedService{ctrl: ctrl}
	mock.recorder = &MockIPlaceholderFeedServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPlaceholderFeedService) EXPECT() *MockIPlaceholderFeedServiceMockRecorder {
	return m.recorder
}

// PlaceholderRecorded mocks base method.
func (m *MockIPlaceholderFeedService) PlaceholderRecorded(arg0 context.Context, arg1 model.PlaceholderMessage) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceholderRecorded", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceholderRecorded indicates an expected call of PlaceholderRecorded.
func (mr *MockIPlaceholderFeedServiceMockRecorder) PlaceholderRecorded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceholderRecorded", reflect.TypeOf((*MockIPlaceholderFeedService)(nil).PlaceholderRecorded), arg0, arg1)
}
