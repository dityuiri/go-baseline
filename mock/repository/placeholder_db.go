// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dityuiri/go-baseline/repository (interfaces: IPlaceholderRepository)

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	dao "github.com/dityuiri/go-baseline/model"
	reflect "reflect"

	db "github.com/dityuiri/go-adapter/db"
	gomock "github.com/golang/mock/gomock"
)

// MockIPlaceholderRepository is a mock of IPlaceholderRepository interface.
type MockIPlaceholderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPlaceholderRepositoryMockRecorder
}

// MockIPlaceholderRepositoryMockRecorder is the mock recorder for MockIPlaceholderRepository.
type MockIPlaceholderRepositoryMockRecorder struct {
	mock *MockIPlaceholderRepository
}

// NewMockIPlaceholderRepository creates a new mock instance.
func NewMockIPlaceholderRepository(ctrl *gomock.Controller) *MockIPlaceholderRepository {
	mock := &MockIPlaceholderRepository{ctrl: ctrl}
	mock.recorder = &MockIPlaceholderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPlaceholderRepository) EXPECT() *MockIPlaceholderRepositoryMockRecorder {
	return m.recorder
}

// GetSinglePlaceholder mocks base method.
func (m *MockIPlaceholderRepository) GetSinglePlaceholder(arg0 context.Context, arg1 string) (dao.PlaceholderDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSinglePlaceholder", arg0, arg1)
	ret0, _ := ret[0].(dao.PlaceholderDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSinglePlaceholder indicates an expected call of GetSinglePlaceholder.
func (mr *MockIPlaceholderRepositoryMockRecorder) GetSinglePlaceholder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSinglePlaceholder", reflect.TypeOf((*MockIPlaceholderRepository)(nil).GetSinglePlaceholder), arg0, arg1)
}

// InsertPlaceholder mocks base method.
func (m *MockIPlaceholderRepository) InsertPlaceholder(arg0 context.Context, arg1 db.ITransaction, arg2 dao.PlaceholderDAO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPlaceholder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPlaceholder indicates an expected call of InsertPlaceholder.
func (mr *MockIPlaceholderRepositoryMockRecorder) InsertPlaceholder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPlaceholder", reflect.TypeOf((*MockIPlaceholderRepository)(nil).InsertPlaceholder), arg0, arg1, arg2)
}

// UpdatePlaceholder mocks base method.
func (m *MockIPlaceholderRepository) UpdatePlaceholder(arg0 context.Context, arg1 db.ITransaction, arg2 dao.PlaceholderDAO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaceholder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlaceholder indicates an expected call of UpdatePlaceholder.
func (mr *MockIPlaceholderRepositoryMockRecorder) UpdatePlaceholder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaceholder", reflect.TypeOf((*MockIPlaceholderRepository)(nil).UpdatePlaceholder), arg0, arg1, arg2)
}
