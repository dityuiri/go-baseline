// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dityuiri/go-baseline/adapter/db (interfaces: IResult)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIResult is a mock of IResult interface.
type MockIResult struct {
	ctrl     *gomock.Controller
	recorder *MockIResultMockRecorder
}

// MockIResultMockRecorder is the mock recorder for MockIResult.
type MockIResultMockRecorder struct {
	mock *MockIResult
}

// NewMockIResult creates a new mock instance.
func NewMockIResult(ctrl *gomock.Controller) *MockIResult {
	mock := &MockIResult{ctrl: ctrl}
	mock.recorder = &MockIResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIResult) EXPECT() *MockIResultMockRecorder {
	return m.recorder
}

// LastInsertId mocks base method.
func (m *MockIResult) LastInsertId() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastInsertId")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastInsertId indicates an expected call of LastInsertId.
func (mr *MockIResultMockRecorder) LastInsertId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastInsertId", reflect.TypeOf((*MockIResult)(nil).LastInsertId))
}

// RowsAffected mocks base method.
func (m *MockIResult) RowsAffected() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RowsAffected indicates an expected call of RowsAffected.
func (mr *MockIResultMockRecorder) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockIResult)(nil).RowsAffected))
}
