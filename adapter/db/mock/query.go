// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dityuiri/go-baseline/adapter/db (interfaces: IQuery)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	db "github.com/dityuiri/go-baseline/adapter/db"
	gomock "github.com/golang/mock/gomock"
)

// MockIQuery is a mock of IQuery interface.
type MockIQuery struct {
	ctrl     *gomock.Controller
	recorder *MockIQueryMockRecorder
}

// MockIQueryMockRecorder is the mock recorder for MockIQuery.
type MockIQueryMockRecorder struct {
	mock *MockIQuery
}

// NewMockIQuery creates a new mock instance.
func NewMockIQuery(ctrl *gomock.Controller) *MockIQuery {
	mock := &MockIQuery{ctrl: ctrl}
	mock.recorder = &MockIQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQuery) EXPECT() *MockIQueryMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIQuery) Execute(arg0 string, arg1 ...interface{}) (db.IResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(db.IResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIQueryMockRecorder) Execute(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIQuery)(nil).Execute), varargs...)
}

// ExecuteContext mocks base method.
func (m *MockIQuery) ExecuteContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (db.IResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteContext", varargs...)
	ret0, _ := ret[0].(db.IResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteContext indicates an expected call of ExecuteContext.
func (mr *MockIQueryMockRecorder) ExecuteContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteContext", reflect.TypeOf((*MockIQuery)(nil).ExecuteContext), varargs...)
}

// Query mocks base method.
func (m *MockIQuery) Query(arg0 string, arg1 ...interface{}) (db.IRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(db.IRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockIQueryMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIQuery)(nil).Query), varargs...)
}

// QueryContext mocks base method.
func (m *MockIQuery) QueryContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (db.IRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(db.IRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockIQueryMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockIQuery)(nil).QueryContext), varargs...)
}

// QueryRow mocks base method.
func (m *MockIQuery) QueryRow(arg0 string, arg1 ...interface{}) db.IRow {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(db.IRow)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockIQueryMockRecorder) QueryRow(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockIQuery)(nil).QueryRow), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockIQuery) QueryRowContext(arg0 context.Context, arg1 string, arg2 ...interface{}) db.IRow {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(db.IRow)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockIQueryMockRecorder) QueryRowContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockIQuery)(nil).QueryRowContext), varargs...)
}
