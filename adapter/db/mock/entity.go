// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dityuiri/go-baseline/adapter/db (interfaces: IEntity)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	db "github.com/dityuiri/go-baseline/adapter/db"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIEntity is a mock of IEntity interface.
type MockIEntity struct {
	ctrl     *gomock.Controller
	recorder *MockIEntityMockRecorder
}

// MockIEntityMockRecorder is the mock recorder for MockIEntity.
type MockIEntityMockRecorder struct {
	mock *MockIEntity
}

// NewMockIEntity creates a new mock instance.
func NewMockIEntity(ctrl *gomock.Controller) *MockIEntity {
	mock := &MockIEntity{ctrl: ctrl}
	mock.recorder = &MockIEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEntity) EXPECT() *MockIEntityMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIEntity) Add(arg0 interface{}, arg1 ...string) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIEntityMockRecorder) Add(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIEntity)(nil).Add), varargs...)
}

// Execute mocks base method.
func (m *MockIEntity) Execute(arg0 string, arg1 ...interface{}) (db.IResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(db.IResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIEntityMockRecorder) Execute(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIEntity)(nil).Execute), varargs...)
}

// ExecuteContext mocks base method.
func (m *MockIEntity) ExecuteContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (db.IResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteContext", varargs...)
	ret0, _ := ret[0].(db.IResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteContext indicates an expected call of ExecuteContext.
func (mr *MockIEntityMockRecorder) ExecuteContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteContext", reflect.TypeOf((*MockIEntity)(nil).ExecuteContext), varargs...)
}

// Get mocks base method.
func (m *MockIEntity) Get(arg0 interface{}, arg1 ...string) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIEntityMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIEntity)(nil).Get), varargs...)
}

// GetRows mocks base method.
func (m *MockIEntity) GetRows(arg0 interface{}, arg1 ...string) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRows", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRows indicates an expected call of GetRows.
func (mr *MockIEntityMockRecorder) GetRows(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRows", reflect.TypeOf((*MockIEntity)(nil).GetRows), varargs...)
}

// GetRowsStatement mocks base method.
func (m *MockIEntity) GetRowsStatement(arg0 interface{}, arg1 string, arg2 ...string) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRowsStatement", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRowsStatement indicates an expected call of GetRowsStatement.
func (mr *MockIEntityMockRecorder) GetRowsStatement(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRowsStatement", reflect.TypeOf((*MockIEntity)(nil).GetRowsStatement), varargs...)
}

// GetStatement mocks base method.
func (m *MockIEntity) GetStatement(arg0 interface{}, arg1 string, arg2 ...string) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatement", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatement indicates an expected call of GetStatement.
func (mr *MockIEntityMockRecorder) GetStatement(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatement", reflect.TypeOf((*MockIEntity)(nil).GetStatement), varargs...)
}

// New mocks base method.
func (m *MockIEntity) New(arg0 interface{}) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockIEntityMockRecorder) New(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockIEntity)(nil).New), arg0)
}

// Query mocks base method.
func (m *MockIEntity) Query(arg0 string, arg1 ...interface{}) (db.IRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(db.IRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockIEntityMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIEntity)(nil).Query), varargs...)
}

// QueryContext mocks base method.
func (m *MockIEntity) QueryContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (db.IRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(db.IRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockIEntityMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockIEntity)(nil).QueryContext), varargs...)
}

// QueryRow mocks base method.
func (m *MockIEntity) QueryRow(arg0 string, arg1 ...interface{}) db.IRow {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(db.IRow)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockIEntityMockRecorder) QueryRow(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockIEntity)(nil).QueryRow), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockIEntity) QueryRowContext(arg0 context.Context, arg1 string, arg2 ...interface{}) db.IRow {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(db.IRow)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockIEntityMockRecorder) QueryRowContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockIEntity)(nil).QueryRowContext), varargs...)
}

// Remove mocks base method.
func (m *MockIEntity) Remove(arg0 interface{}, arg1 ...string) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Remove", varargs...)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockIEntityMockRecorder) Remove(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIEntity)(nil).Remove), varargs...)
}

// Update mocks base method.
func (m *MockIEntity) Update(arg0 interface{}, arg1 ...string) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIEntityMockRecorder) Update(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIEntity)(nil).Update), varargs...)
}
