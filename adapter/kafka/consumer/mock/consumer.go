// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dityuiri/go-baseline/adapter/kafka/consumer (interfaces: IConsumer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	kafka "github.com/dityuiri/go-baseline/adapter/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockIConsumer is a mock of IConsumer interface.
type MockIConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockIConsumerMockRecorder
}

// MockIConsumerMockRecorder is the mock recorder for MockIConsumer.
type MockIConsumerMockRecorder struct {
	mock *MockIConsumer
}

// NewMockIConsumer creates a new mock instance.
func NewMockIConsumer(ctrl *gomock.Controller) *MockIConsumer {
	mock := &MockIConsumer{ctrl: ctrl}
	mock.recorder = &MockIConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConsumer) EXPECT() *MockIConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIConsumer)(nil).Close))
}

// Commit mocks base method.
func (m *MockIConsumer) Commit(arg0 context.Context, arg1 string, arg2 *kafka.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockIConsumerMockRecorder) Commit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockIConsumer)(nil).Commit), arg0, arg1, arg2)
}

// Consume mocks base method.
func (m *MockIConsumer) Consume(arg0 context.Context, arg1 string) (*kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", arg0, arg1)
	ret0, _ := ret[0].(*kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockIConsumerMockRecorder) Consume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockIConsumer)(nil).Consume), arg0, arg1)
}

// Fetch mocks base method.
func (m *MockIConsumer) Fetch(arg0 context.Context, arg1 string) (*kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockIConsumerMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockIConsumer)(nil).Fetch), arg0, arg1)
}
