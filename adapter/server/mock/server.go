// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dityuiri/go-baseline/adapter/server (interfaces: IServer)

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	server "github.com/dityuiri/go-baseline/adapter/server"
	chi "github.com/go-chi/chi"
	gomock "github.com/golang/mock/gomock"
)

// MockIServer is a mock of IServer interface.
type MockIServer struct {
	ctrl     *gomock.Controller
	recorder *MockIServerMockRecorder
}

// MockIServerMockRecorder is the mock recorder for MockIServer.
type MockIServerMockRecorder struct {
	mock *MockIServer
}

// NewMockIServer creates a new mock instance.
func NewMockIServer(ctrl *gomock.Controller) *MockIServer {
	mock := &MockIServer{ctrl: ctrl}
	mock.recorder = &MockIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServer) EXPECT() *MockIServerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIServer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIServerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIServer)(nil).Close))
}

// Configure mocks base method.
func (m *MockIServer) Configure(arg0 ...server.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Configure", varargs...)
}

// Configure indicates an expected call of Configure.
func (mr *MockIServerMockRecorder) Configure(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockIServer)(nil).Configure), arg0...)
}

// Connect mocks base method.
func (m *MockIServer) Connect(arg0 string, arg1 http.HandlerFunc, arg2 ...server.HandlerOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Connect", varargs...)
}

// Connect indicates an expected call of Connect.
func (mr *MockIServerMockRecorder) Connect(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIServer)(nil).Connect), varargs...)
}

// Delete mocks base method.
func (m *MockIServer) Delete(arg0 string, arg1 http.HandlerFunc, arg2 ...server.HandlerOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Delete", varargs...)
}

// Delete indicates an expected call of Delete.
func (mr *MockIServerMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIServer)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockIServer) Get(arg0 string, arg1 http.HandlerFunc, arg2 ...server.HandlerOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Get", varargs...)
}

// Get indicates an expected call of Get.
func (mr *MockIServerMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIServer)(nil).Get), varargs...)
}

// GetRouter mocks base method.
func (m *MockIServer) GetRouter() *chi.Mux {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouter")
	ret0, _ := ret[0].(*chi.Mux)
	return ret0
}

// GetRouter indicates an expected call of GetRouter.
func (mr *MockIServerMockRecorder) GetRouter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouter", reflect.TypeOf((*MockIServer)(nil).GetRouter))
}

// Head mocks base method.
func (m *MockIServer) Head(arg0 string, arg1 http.HandlerFunc, arg2 ...server.HandlerOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Head", varargs...)
}

// Head indicates an expected call of Head.
func (mr *MockIServerMockRecorder) Head(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockIServer)(nil).Head), varargs...)
}

// Options mocks base method.
func (m *MockIServer) Options(arg0 string, arg1 http.HandlerFunc, arg2 ...server.HandlerOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Options", varargs...)
}

// Options indicates an expected call of Options.
func (mr *MockIServerMockRecorder) Options(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockIServer)(nil).Options), varargs...)
}

// Parse mocks base method.
func (m *MockIServer) Parse(arg0 *http.Request, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockIServerMockRecorder) Parse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockIServer)(nil).Parse), arg0, arg1)
}

// Patch mocks base method.
func (m *MockIServer) Patch(arg0 string, arg1 http.HandlerFunc, arg2 ...server.HandlerOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Patch", varargs...)
}

// Patch indicates an expected call of Patch.
func (mr *MockIServerMockRecorder) Patch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockIServer)(nil).Patch), varargs...)
}

// Post mocks base method.
func (m *MockIServer) Post(arg0 string, arg1 http.HandlerFunc, arg2 ...server.HandlerOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Post", varargs...)
}

// Post indicates an expected call of Post.
func (mr *MockIServerMockRecorder) Post(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIServer)(nil).Post), varargs...)
}

// Put mocks base method.
func (m *MockIServer) Put(arg0 string, arg1 http.HandlerFunc, arg2 ...server.HandlerOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Put", varargs...)
}

// Put indicates an expected call of Put.
func (mr *MockIServerMockRecorder) Put(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIServer)(nil).Put), varargs...)
}

// Response mocks base method.
func (m *MockIServer) Response(arg0 http.ResponseWriter, arg1 interface{}, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockIServerMockRecorder) Response(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockIServer)(nil).Response), arg0, arg1, arg2)
}

// Serve mocks base method.
func (m *MockIServer) Serve() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve")
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockIServerMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockIServer)(nil).Serve))
}

// Trace mocks base method.
func (m *MockIServer) Trace(arg0 string, arg1 http.HandlerFunc, arg2 ...server.HandlerOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Trace", varargs...)
}

// Trace indicates an expected call of Trace.
func (mr *MockIServerMockRecorder) Trace(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockIServer)(nil).Trace), varargs...)
}
